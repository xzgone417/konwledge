函数内部对外部造成影响，造成的影响就是副作用

函数副作用 指当调用函数时，除了返回函数值之外，还对主调用函数产生附加的影响。例如修改全局变量（函数外的变量）或修改参数。

纯函数 ( Pure Function )
输入输出数据流全是显式（Explicit）的。 显式（Explicit）的意思是，函数与外界交换数据只有一个唯一渠道——参数和返回值。
函数从函数外部接受的所有输入信息都通过参数传递到该函数内部。函数输出到函数外部的所有信息都通过返回值传递到该函数外部。

`useEffect` 是 React 中用来处理副作用操作的 Hook，常见的使用场景包括但不限于：

1. **数据获取**：从服务器获取数据，可以在 `useEffect` 中进行数据请求操作。
   
2. **订阅和取消订阅**：订阅外部事件，如 DOM 事件、WebSocket 数据等，在组件卸载时取消订阅。

3. **手动操作 DOM**：需要直接操作 DOM 元素时，可以在 `useEffect` 中进行 DOM 操作。

4. **设置定时器或计时器**：在组件挂载或更新时设置定时器，以及在组件卸载时清除定时器。

5. **依赖更新时触发效果**：根据特定状态或 props 的变化执行副作用操作。

6. **优化性能**：通过控制 `useEffect` 的依赖项，可以避免不必要的重复执行。

7. **处理副作用操作**：处理副作用操作，如修改文档标题、触发动画效果等。

8. **集成第三方库**：在 `useEffect` 中初始化第三方库或进行相关操作。

9. **本地存储**：在 `useEffect` 中读取或写入本地存储。

10. **处理网络请求**：在 `useEffect` 中处理网络请求，例如发送 AJAX 请求。

11. **路由导航**：在路由变化时执行特定操作，如页面切换时的数据加载。

12. **动态更新文档标题**：根据组件的状态动态更新文档标题。

这些只是 `useEffect` 的一些常见使用场景，实际上，`useEffect` 可以用于处理几乎所有副作用操作，以及在组件生命周期中的各种情况下执行相应的操作。