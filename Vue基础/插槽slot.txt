插槽不是独立的组件,而是组件所有的一种格式罢了。
只不过是在子组件的template里加了插槽标签，然后插槽标签显不显示由父组件在引用子组件时在开始与结束标签之间写没写内容为准，
然后父组件对应使用插槽绑定罢了

APP页面和父组件不用写slot，它写的内容根据slot的name自动反应给子组件，slot没加name就是defult，没指定插槽父组件写在标签之中的内容
就会自动放入其中，
如果父组件写了<template v-slot:haveName>就会把该tempate的内容放入子组件即插槽文件内部的slot对应name的插槽中，最后呈现在浏览器上。

//子组件命名插槽
而子组件上的slot是表示插槽的默认内容，并接收父组件slot的内容。子组件不仅要写 <slot name="haveName">具名插槽默认内容</slot>
子组件的<slot></slot>一般为空，当父组件不在子组件开始结束标签写内容的时候，
<slot><p>父组件在子组件之间不写内容，那么我就是一个普通的p标签显示在页面上，但是有内容我就被取代了，即默认内容</p></slot>

//父组件
原本父组件引用子组件是不会在表示子组件的标签中写内容的。<Son :FatherToSon="FatherToSon"></Son> 
但是用了插槽之后，<Son :FatherToSon="FatherToSon">
 <div>在子组件的开始与结束标签写内容，就会传给子组件插槽</div>
<template v-slot:haveName>具名插槽</template>
</Son> 

正常子组件在引用时，开始和结束标签之间是空的。
重要的是插槽中间的内容与样式全部是在父组件上定义，子组件其他样式还是在父组件上写。插槽组件内部写了一个<h1>标签，
那么父组件在引用这个插槽组件时一定会显示这个<h1>标签的内容

同样父组件写在子组件二者之间的模板字符串也是使用的父组件的数据，即子组件就是一个普通的写好样式和标签的盒子，
但是在这个盒子里面又出现一个绝对定位的小盒子显示在盒子的上方。这个绝对定位的小盒子就可以类比为插槽。属于子组件但是和子组件又有着隔阂

插槽不仅可以是html元素，也能是一段文字，总之是插入一段节点，文字节点，元素节点都是节点。